C51 COMPILER V9.00   AMP                                                                   01/15/2025 09:25:08 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE AMP
OBJECT MODULE PLACED IN .\Debug\AMP.obj
COMPILER INVOKED BY: E:\KEIL\KEIL4\C51\BIN\C51.EXE ..\User\source\Hardware\AMP.c LARGE OMF2 BROWSE INCDIR(..\FU68xx_Hard
                    -ware_Driver\Include;..\User\include) DEBUG PRINT(.\Listings\AMP.lst) OBJECT(.\Debug\AMP.obj)

line level    source

   1          /* --------------------------- (C) COPYRIGHT 2021 Fortiortech ShenZhen -----------------------------
   2              File Name      : AMP.c
   3              Author         : Lewis.wang
   4              Version        : V1.0
   5              Date           : 2021-12-04
   6              Description    : This file contains AMP function used for Motor Control.
   7          ----------------------------------------------------------------------------------------------------  
   8                                                 All Rights Reserved
   9          ------------------------------------------------------------------------------------------------- */
  10          
  11          #include <FU68xx_4_MCU.h>
  12          #include <Myproject.h>
  13          
  14          /* -------------------------------------------------------------------------------------------------
  15              Function Name  : AMP_Init
  16              Description    : ËøêÊîæÂàùÂßãÂåñÈÖçÁΩÆ
  17              Date           : 2021-12-04
  18              Parameter      : None
  19          ------------------------------------------------------------------------------------------------- */
  20          void AMP_Init(void)
  21          {
  22   1          #if (Shunt_Resistor_Mode == Single_Resistor)
  23   1          {     
  24   2              SetBit(P3_AN, P31);                                       //AMP0 PinËÆæÁΩÆ‰∏∫Ê®°ÊãüÊ®°Âºè  +
  25   2              SetBit(P3_AN, P30);                                       //AMP0 PinËÆæÁΩÆ‰∏∫Ê®°ÊãüÊ®°Âºè  -
  26   2              SetBit(P2_AN, P27);                                       //AMP0 PinËÆæÁΩÆ‰∏∫Ê®°ÊãüÊ®°Âºè  O
  27   2              
  28   2              #if (AMP0Mode == Inter_AMP0)    // ÂÜÖÈÉ®ËøêÊîæ
  29   2              {
  30   3                  SetReg(AMP0_GAIN, AMP0_GAIN2 | AMP0_GAIN1 | AMP0_GAIN0, MCU_AMP0GAIN);
  31   3              }
  32   2              #elif (AMP0Mode == Exter_AMP0)
                      {
                          SetReg(AMP0_GAIN, AMP0_GAIN2 | AMP0_GAIN1 | AMP0_GAIN0, 0x000);
                      }
                      #endif
  37   2              
  38   2              SetBit(AMP_CR, AMP0EN);      
  39   2          }
  40   1          #elif (Shunt_Resistor_Mode == Double_Resistor)
                  {
                      SetBit(P3_AN, P31);                                       //AMP0 PinËÆæÁΩÆ‰∏∫Ê®°ÊãüÊ®°Âºè  +
                      SetBit(P3_AN, P30);                                       //AMP0 PinËÆæÁΩÆ‰∏∫Ê®°ÊãüÊ®°Âºè  -
                      SetBit(P2_AN, P27);                                       //AMP0 PinËÆæÁΩÆ‰∏∫Ê®°ÊãüÊ®°Âºè  O
                  
                      SetBit(P1_AN, P16);                                       //AMP1 PinËÆæÁΩÆ‰∏∫Ê®°ÊãüÊ®°Âºè  +
                      SetBit(P1_AN, P17);                                       //AMP1 PinËÆæÁΩÆ‰∏∫Ê®°ÊãüÊ®°Âºè  -
                      SetBit(P2_AN, P20);                                       //AMP1 PinËÆæÁΩÆ‰∏∫Ê®°ÊãüÊ®°Âºè  O
                  
                      SetBit(P2_AN, P21);                                       //AMP2 PinËÆæÁΩÆ‰∏∫Ê®°ÊãüÊ®°Âºè  +
                      SetBit(P2_AN, P22);                                       //AMP2 PinËÆæÁΩÆ‰∏∫Ê®°ÊãüÊ®°Âºè  -
                      SetBit(P2_AN, P23);                                       //AMP2 PinËÆæÁΩÆ‰∏∫Ê®°ÊãüÊ®°Âºè  O
                      ClrBit(P2_OE, P23);                                       //P23_OEÈúÄË¶ÅÂº∫Âà∂‰∏∫0ÔºåÁ¶ÅÊ≠¢DA1ËæìÂ
             -á∫Ëá≥PAD
C51 COMPILER V9.00   AMP                                                                   01/15/2025 09:25:08 PAGE 2   

                  
                      #if (AMP0Mode == Inter_AMP0)
                      {
                          SetReg(AMP0_GAIN, AMP0_GAIN2 | AMP0_GAIN1 | AMP0_GAIN0, MCU_AMP0GAIN);
                      }
                      #elif (AMP0Mode == Exter_AMP0)
                      {
                          SetReg(AMP0_GAIN, AMP0_GAIN2 | AMP0_GAIN1 | AMP0_GAIN0, 0x000);
                      }
                      #endif
                  
                      SetBit(AMP_CR, AMP0EN);
                      SetBit(AMP_CR, AMP1EN);                                    //AMP1 Enable
                      SetBit(AMP_CR, AMP2EN);                                    //AMP2 Enable
                  }
                  #endif
  70   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     35    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
